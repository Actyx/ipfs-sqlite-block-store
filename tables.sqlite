DROP TABLE cids;
DROP TABLE refs;
DROP TABLE blocks;
DROP TABLE atime;
PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS cids (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    cid BLOB UNIQUE
);

CREATE TABLE IF NOT EXISTS refs (
    parent_id INTEGER,
    child_id INTEGER,
    UNIQUE(parent_id,child_id)
    CONSTRAINT fk_parent_id
      FOREIGN KEY (parent_id)
      REFERENCES cids(id)
      ON DELETE CASCADE
    CONSTRAINT fk_child_id
      FOREIGN KEY (child_id)
      REFERENCES cids(id)
      ON DELETE CASCADE
);

CREATE INDEX idx_refs_parent_id
ON refs (parent_id);

CREATE INDEX idx_refs_child_id
ON refs (child_id);

CREATE TABLE IF NOT EXISTS blocks (
    block_id INTEGER PRIMARY_KEY,
    block BLOB UNIQUE,
    CONSTRAINT fk_block_id
      FOREIGN KEY (block_id)
      REFERENCES cids(id)
      ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS atime (
    atime INTEGER PRIMARY KEY AUTOINCREMENT,
    block_id INTEGER UNIQUE,
    CONSTRAINT fk_block_id
      FOREIGN KEY (block_id)
      REFERENCES cids(id)
      ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS aliases (
    name blob UNIQUE,
    block_id INTEGER,
    CONSTRAINT fk_block_id
      FOREIGN KEY (block_id)
      REFERENCES cids(id)
      ON DELETE CASCADE
);

BEGIN TRANSACTION;
-- note that we would have to use INSERT OR IGNORE here in a real database
INSERT INTO cids (cid) VALUES ("cid_a");
INSERT INTO blocks (block_id, block) VALUES (last_insert_rowid(), "value_a");
COMMIT;

BEGIN TRANSACTION;
-- note that we would have to use INSERT OR IGNORE here in a real database
INSERT INTO cids (cid) VALUES ("cid_b");
INSERT INTO blocks (block_id, block) VALUES (last_insert_rowid(), "value_b");
COMMIT;

BEGIN TRANSACTION;
-- note that we would have to use INSERT OR IGNORE here in a real database
INSERT INTO cids (cid) VALUES ("cid_c");
INSERT INTO blocks (block_id, block) VALUES (last_insert_rowid(), "value_c");
COMMIT;

BEGIN TRANSACTION;
-- note that we would have to use INSERT OR IGNORE here in a real database
INSERT INTO cids (cid) VALUES ("cid_d");
INSERT INTO blocks (block_id, block) VALUES (last_insert_rowid(), "value_d");
COMMIT;

INSERT INTO atime (block_id) VALUES (1);
INSERT INTO atime (block_id) VALUES (2);
INSERT INTO atime (block_id) VALUES (3);
INSERT INTO atime (block_id) VALUES (4);

-- a is parent of b and c
INSERT INTO refs (parent_id, child_id) VALUES (1,2);
INSERT INTO refs (parent_id, child_id) VALUES (1,3);

-- d is parent of b and c
INSERT INTO refs (parent_id, child_id) VALUES (4,2);
INSERT INTO refs (parent_id, child_id) VALUES (4,3);

SELECT
  (SELECT COUNT(parent_id) FROM refs WHERE child_id = 1) +
  (SELECT COUNT(name) FROM aliases WHERE block_id = 1);

SELECT * FROM
  cids
WHERE
  NOT EXISTS(SELECT 1 FROM refs WHERE child_id = id) AND
  NOT EXISTS(SELECT 1 FROM aliases WHERE block_id = id);